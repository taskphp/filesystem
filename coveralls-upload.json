{"service_name":"php-coveralls","service_event_type":"manual","repo_token":"HyrW1vz4tnuMQtEtxREHNjGeaU4nSmzPE","git":{"branch":"master","head":{"id":"6453ebed94a2870b98d7adcf57ebdc8e9ced4658","author_name":"Mike Fisher","author_email":"mike@mbfisher.com","committer_name":"Mike Fisher","committer_email":"mike@mbfisher.com","message":"Add REAMDE"},"remotes":[{"name":"origin","url":"git@github.com:taskphp\/filesystem.git"}]},"run_at":"2014-04-26 14:31:53 +0000","source_files":[{"name":"Filesystem\/File.php","source":"<?php\n\nnamespace Task\\Plugin\\Filesystem;\n\nuse Task\\Plugin\\Stream;\n\nclass File extends \\SplFileObject implements Stream\\ReadableInterface, Stream\\WritableInterface\n{\n    public function __construct($filename, $mode = 'r+')\n    {\n        try {\n            parent::__construct($filename, $mode);\n        } catch (\\RuntimeException $ex) {\n        }\n    }\n\n    public function read()\n    {\n        $this->rewind();\n\n        $content = '';\n        while (!$this->eof()) {\n            $content .= $this->fgets();\n        }\n\n        return $content;\n    }\n\n    public function write($data)\n    {\n        if ($data instanceof File) {\n            $data = $data->read();\n        }\n\n        $this->ftruncate(0);\n        $this->fwrite($data);\n        return $this;\n    }\n\n    public function append($content)\n    {\n        while (!$this->eof()) {\n            # why doesn't next() work here?\n            $this->current();\n        }\n\n        $this->fwrite($content);\n        return $this;\n    }\n\n    public function pipe(Stream\\WritableInterface $to)\n    {\n        return $to->write($this->read());\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,2,2,null,2,null,null,null,0,null,0,0,0,0,null,0,null,null,null,null,0,0,0,null,0,0,0,null,null,null,null,0,null,0,0,null,0,0,null,null,null,null,0,null,null]},{"name":"Filesystem\/FilesystemIterator.php","source":"<?php\n\nnamespace Task\\Plugin\\Filesystem;\n\nuse Task\\Plugin\\Stream\\ReadableInterface;\nuse Task\\Plugin\\Stream\\WritableInterface;\n\nclass FilesystemIterator extends \\RecursiveIteratorIterator implements ReadableInterface\n{\n    public function __construct(\n        $path,\n        $directoryOptions = \\FilesystemIterator::SKIP_DOTS,\n        $iteratorOptions = null\n    ) {\n        parent::__construct(\n            new \\RecursiveDirectoryIterator(\n                $path,\n                $directoryOptions\n            ),\n            $iteratorOptions\n        );\n\n        $this->path = $path;\n    }\n\n    public function getPath()\n    {\n        return $this->path;\n    }\n\n    public function read()\n    {\n        return $this;\n    }\n\n    public function pipe(WritableInterface $to)\n    {\n        return $to->write($this->read());\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,1,1,1,null,1,null,1,null,1,1,null,null,null,1,null,null,null,null,0,null,null,null,null,0,null,null]},{"name":"FilesystemPlugin.php","source":"<?php\n\nnamespace Task\\Plugin;\n\nuse Task\\Plugin\\PluginInterface;\nuse Symfony\\Component\\Filesystem\\Filesystem;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Task\\Plugin\\Filesystem\\File;\nuse Task\\Plugin\\Filesystem\\FilesystemIterator;\nuse Symfony\\Component\\Finder\\Finder;\n\nclass FilesystemPlugin extends Filesystem implements PluginInterface\n{\n    public function open($filename, $mode = 'r+')\n    {\n        return new File($filename, $mode);\n    }\n\n    public function touch($filename, $time = null, $atime = null)\n    {\n        if (!is_string($filename)) {\n            throw new \\InvalidArgumentException(\"File name must be a string\");\n        }\n\n        parent::touch($filename, $time, $atime);\n        return $this->open($filename);\n    }\n\n    public function ls($dir)\n    {\n        return new FilesystemIterator($dir);\n    }\n\n    public function copy($source, $target, $override = false)\n    {\n        $target = rtrim($target, '\/');\n        $source = rtrim($source, '\/');\n\n        if (is_file($source)) {\n            if (is_dir($target)) {\n                return parent::copy($source, $target.DIRECTORY_SEPARATOR.basename($source), $override);\n            } elseif (is_link($source)) {\n                return $this->symlink(readlink($source), $target);\n            } else {\n                return parent::copy($source, $target, $override);\n            }\n        } elseif (is_dir($source)) {\n            if (is_file($target)) {\n                throw new \\LogicException(\"Cannot copy directory to file\");\n            } else {\n                return $this->mirror($source, $target);\n            }\n        }\n\n        throw new FileNotFoundException(\"Could not copy $source to $target\");\n    }\n\n    public function copyTree($baseDir, $target, Finder $finder)\n    {\n        foreach ($finder as $file) {\n            if (!$file->isDir()) {\n                $path = substr($file->getPathname(), strlen(\"$baseDir\/\"));\n                $this->copy(\"$baseDir\/$path\", \"$target\/$path\");\n            }\n        }\n    }\n}","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2,null,null,null,null,2,1,null,null,1,1,null,null,null,null,1,null,null,null,null,7,7,null,7,5,1,4,1,null,3,null,3,2,1,null,1,null,null,null,1,null,null,null,null,1,1,1,1,1,1,1,null]}]}